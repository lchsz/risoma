// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// find_isoforms
DataFrame find_isoforms(DataFrame mirnas, DataFrame reads, int max_indel_5p, int max_indel_3p, int max_snp_5p, int max_snp_3p, int max_snp_seed, int max_snp);
RcppExport SEXP _risoma_find_isoforms(SEXP mirnasSEXP, SEXP readsSEXP, SEXP max_indel_5pSEXP, SEXP max_indel_3pSEXP, SEXP max_snp_5pSEXP, SEXP max_snp_3pSEXP, SEXP max_snp_seedSEXP, SEXP max_snpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type mirnas(mirnasSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type reads(readsSEXP);
    Rcpp::traits::input_parameter< int >::type max_indel_5p(max_indel_5pSEXP);
    Rcpp::traits::input_parameter< int >::type max_indel_3p(max_indel_3pSEXP);
    Rcpp::traits::input_parameter< int >::type max_snp_5p(max_snp_5pSEXP);
    Rcpp::traits::input_parameter< int >::type max_snp_3p(max_snp_3pSEXP);
    Rcpp::traits::input_parameter< int >::type max_snp_seed(max_snp_seedSEXP);
    Rcpp::traits::input_parameter< int >::type max_snp(max_snpSEXP);
    rcpp_result_gen = Rcpp::wrap(find_isoforms(mirnas, reads, max_indel_5p, max_indel_3p, max_snp_5p, max_snp_3p, max_snp_seed, max_snp));
    return rcpp_result_gen;
END_RCPP
}
// load_reads
DataFrame load_reads(std::string fq_file);
RcppExport SEXP _risoma_load_reads(SEXP fq_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fq_file(fq_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(load_reads(fq_file));
    return rcpp_result_gen;
END_RCPP
}
// load_reads_gz
DataFrame load_reads_gz(std::string fq_file);
RcppExport SEXP _risoma_load_reads_gz(SEXP fq_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fq_file(fq_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(load_reads_gz(fq_file));
    return rcpp_result_gen;
END_RCPP
}
// generate_cigar
std::string generate_cigar(const std::string& seq1, const std::string& seq2);
RcppExport SEXP _risoma_generate_cigar(SEXP seq1SEXP, SEXP seq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type seq1(seq1SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type seq2(seq2SEXP);
    rcpp_result_gen = Rcpp::wrap(generate_cigar(seq1, seq2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_risoma_find_isoforms", (DL_FUNC) &_risoma_find_isoforms, 8},
    {"_risoma_load_reads", (DL_FUNC) &_risoma_load_reads, 1},
    {"_risoma_load_reads_gz", (DL_FUNC) &_risoma_load_reads_gz, 1},
    {"_risoma_generate_cigar", (DL_FUNC) &_risoma_generate_cigar, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_risoma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
